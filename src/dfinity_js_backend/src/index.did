service: () -> {
    acceptDeliveryAssignment: (record {driverId:text; assignmentId:text}) -> (variant {Ok:record {status:variant {InTransit:text; Delivered:text; Cancelled:text; Pending:text}; driverId:opt text; deliveryLocation:text; receiverId:text; assignmentId:text; wages:nat64; contractId:text; pickupLocation:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    acceptFoodContract: (record {receiverId:text; contractId:text}) -> (variant {Ok:record {status:variant {Accepted:text; Cancelled:text; Completed:text; Pending:text}; donorId:text; receiverId:opt text; agreedQuantity:nat64; contractId:text; postId:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    completeAssignmentPayment: (principal, text, nat64, nat64, nat64) -> (variant {Ok:record {status:variant {PaymentPending:text; Cancelled:text; Completed:text}; memo:nat64; assignmentId:text; amount:nat64; paid_at_block:opt nat64; receiver:principal; driver:principal; paidAt:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    createDeliveryAssignment: (record {deliveryLocation:text; receiverId:text; wages:nat64; contractId:text; pickupLocation:text}) -> (variant {Ok:record {status:variant {InTransit:text; Delivered:text; Cancelled:text; Pending:text}; driverId:opt text; deliveryLocation:text; receiverId:text; assignmentId:text; wages:nat64; contractId:text; pickupLocation:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    createDeliveryDriverProfile: (record {name:text; email:text; vehicle:variant {Car:text; Van:text; Bicycle:text; Motorcycle:text; Truck:text; Other:text}; phoneNumber:text}) -> (variant {Ok:record {driverId:text; owner:principal; name:text; email:text; vehicle:variant {Car:text; Van:text; Bicycle:text; Motorcycle:text; Truck:text; Other:text}; phoneNumber:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    createDonorProfile: (record {name:text; businessType:variant {Grocery:text; Bakery:text; Other:text; Restaurant:text}; email:text; address:text; phoneNumber:text}) -> (variant {Ok:record {owner:principal; donorId:text; name:text; businessType:variant {Grocery:text; Bakery:text; Other:text; Restaurant:text}; email:text; address:text; phoneNumber:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    createFoodContract: (record {donorId:text; agreedQuantity:nat64; postId:text}) -> (variant {Ok:record {status:variant {Accepted:text; Cancelled:text; Completed:text; Pending:text}; donorId:text; receiverId:opt text; agreedQuantity:nat64; contractId:text; postId:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    createFoodSurplusPost: (record {donorId:text; expiryDate:text; description:text; quantity:nat64; location:text; foodType:text}) -> (variant {Ok:record {status:variant {Available:text; Claimed:text}; donorId:text; expiryDate:text; description:text; quantity:nat64; location:text; postId:text; foodType:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    createReceiverProfile: (record {name:text; email:text; needs:text; address:text; phoneNumber:text}) -> (variant {Ok:record {owner:principal; name:text; email:text; receiverId:text; needs:text; address:text; phoneNumber:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    createReserveAssignmentPayment: (text) -> (variant {Ok:record {status:variant {PaymentPending:text; Cancelled:text; Completed:text}; memo:nat64; assignmentId:text; amount:nat64; paid_at_block:opt nat64; receiver:principal; driver:principal; paidAt:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    deleteDeliveryAssignment: (text) -> (variant {Ok:record {status:variant {InTransit:text; Delivered:text; Cancelled:text; Pending:text}; driverId:opt text; deliveryLocation:text; receiverId:text; assignmentId:text; wages:nat64; contractId:text; pickupLocation:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    deleteDeliveryDriverProfile: (text) -> (variant {Ok:record {driverId:text; owner:principal; name:text; email:text; vehicle:variant {Car:text; Van:text; Bicycle:text; Motorcycle:text; Truck:text; Other:text}; phoneNumber:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    deleteDonorProfile: (text) -> (variant {Ok:record {owner:principal; donorId:text; name:text; businessType:variant {Grocery:text; Bakery:text; Other:text; Restaurant:text}; email:text; address:text; phoneNumber:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    deleteFoodContract: (text) -> (variant {Ok:record {status:variant {Accepted:text; Cancelled:text; Completed:text; Pending:text}; donorId:text; receiverId:opt text; agreedQuantity:nat64; contractId:text; postId:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    deleteFoodSurplusPost: (text) -> (variant {Ok:record {status:variant {Available:text; Claimed:text}; donorId:text; expiryDate:text; description:text; quantity:nat64; location:text; postId:text; foodType:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    deleteReceiverProfile: (text) -> (variant {Ok:record {owner:principal; name:text; email:text; receiverId:text; needs:text; address:text; phoneNumber:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    generateCorrelationId: (text) -> (nat64) query;
    getAcceptedFoodContracts: () -> (vec record {status:variant {Accepted:text; Cancelled:text; Completed:text; Pending:text}; donorId:text; receiverId:opt text; agreedQuantity:nat64; contractId:text; postId:text}) query;
    getAddressFromPrincipal: (principal) -> (text) query;
    getAllDeliveryAssignments: () -> (vec record {status:variant {InTransit:text; Delivered:text; Cancelled:text; Pending:text}; driverId:opt text; deliveryLocation:text; receiverId:text; assignmentId:text; wages:nat64; contractId:text; pickupLocation:text}) query;
    getAllFoodContracts: () -> (vec record {status:variant {Accepted:text; Cancelled:text; Completed:text; Pending:text}; donorId:text; receiverId:opt text; agreedQuantity:nat64; contractId:text; postId:text}) query;
    getAllFoodSurplusPosts: () -> (vec record {status:variant {Available:text; Claimed:text}; donorId:text; expiryDate:text; description:text; quantity:nat64; location:text; postId:text; foodType:text}) query;
    getCancelledDeliveryAssignments: () -> (vec record {status:variant {InTransit:text; Delivered:text; Cancelled:text; Pending:text}; driverId:opt text; deliveryLocation:text; receiverId:text; assignmentId:text; wages:nat64; contractId:text; pickupLocation:text}) query;
    getCancelledFoodContracts: () -> (vec record {status:variant {Accepted:text; Cancelled:text; Completed:text; Pending:text}; donorId:text; receiverId:opt text; agreedQuantity:nat64; contractId:text; postId:text}) query;
    getCompletedFoodContracts: () -> (vec record {status:variant {Accepted:text; Cancelled:text; Completed:text; Pending:text}; donorId:text; receiverId:opt text; agreedQuantity:nat64; contractId:text; postId:text}) query;
    getDeliveredDeliveryAssignments: () -> (vec record {status:variant {InTransit:text; Delivered:text; Cancelled:text; Pending:text}; driverId:opt text; deliveryLocation:text; receiverId:text; assignmentId:text; wages:nat64; contractId:text; pickupLocation:text}) query;
    getDeliveryAssignment: (text) -> (variant {Ok:record {status:variant {InTransit:text; Delivered:text; Cancelled:text; Pending:text}; driverId:opt text; deliveryLocation:text; receiverId:text; assignmentId:text; wages:nat64; contractId:text; pickupLocation:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}}) query;
    getDeliveryDriverProfile: (text) -> (variant {Ok:record {driverId:text; owner:principal; name:text; email:text; vehicle:variant {Car:text; Van:text; Bicycle:text; Motorcycle:text; Truck:text; Other:text}; phoneNumber:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}}) query;
    getDeliveryDriverProfileByOwner: () -> (variant {Ok:record {driverId:text; owner:principal; name:text; email:text; vehicle:variant {Car:text; Van:text; Bicycle:text; Motorcycle:text; Truck:text; Other:text}; phoneNumber:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}}) query;
    getDonorProfile: (text) -> (variant {Ok:record {owner:principal; donorId:text; name:text; businessType:variant {Grocery:text; Bakery:text; Other:text; Restaurant:text}; email:text; address:text; phoneNumber:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}}) query;
    getDonorProfileByOwner: () -> (variant {Ok:record {owner:principal; donorId:text; name:text; businessType:variant {Grocery:text; Bakery:text; Other:text; Restaurant:text}; email:text; address:text; phoneNumber:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}}) query;
    getFoodContract: (text) -> (variant {Ok:record {status:variant {Accepted:text; Cancelled:text; Completed:text; Pending:text}; donorId:text; receiverId:opt text; agreedQuantity:nat64; contractId:text; postId:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}}) query;
    getFoodContractByDonorId: (text) -> (variant {Ok:record {status:variant {Accepted:text; Cancelled:text; Completed:text; Pending:text}; donorId:text; receiverId:opt text; agreedQuantity:nat64; contractId:text; postId:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}}) query;
    getFoodSurplusPost: (text) -> (variant {Ok:record {status:variant {Available:text; Claimed:text}; donorId:text; expiryDate:text; description:text; quantity:nat64; location:text; postId:text; foodType:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}}) query;
    getInTransitDeliveryAssignments: () -> (vec record {status:variant {InTransit:text; Delivered:text; Cancelled:text; Pending:text}; driverId:opt text; deliveryLocation:text; receiverId:text; assignmentId:text; wages:nat64; contractId:text; pickupLocation:text}) query;
    getPendingDeliveryAssignments: () -> (vec record {status:variant {InTransit:text; Delivered:text; Cancelled:text; Pending:text}; driverId:opt text; deliveryLocation:text; receiverId:text; assignmentId:text; wages:nat64; contractId:text; pickupLocation:text}) query;
    getPendingFoodContracts: () -> (vec record {status:variant {Accepted:text; Cancelled:text; Completed:text; Pending:text}; donorId:text; receiverId:opt text; agreedQuantity:nat64; contractId:text; postId:text}) query;
    getReceiverProfile: (text) -> (variant {Ok:record {owner:principal; name:text; email:text; receiverId:text; needs:text; address:text; phoneNumber:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}}) query;
    getReceiverProfileByOwner: () -> (variant {Ok:record {owner:principal; name:text; email:text; receiverId:text; needs:text; address:text; phoneNumber:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}}) query;
    markDeliveryAssignmentDelivered: (text, text) -> (variant {Ok:record {status:variant {InTransit:text; Delivered:text; Cancelled:text; Pending:text}; driverId:opt text; deliveryLocation:text; receiverId:text; assignmentId:text; wages:nat64; contractId:text; pickupLocation:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    updateDeliveryAssignment: (text, variant {InTransit:text; Delivered:text; Cancelled:text; Pending:text}) -> (variant {Ok:record {status:variant {InTransit:text; Delivered:text; Cancelled:text; Pending:text}; driverId:opt text; deliveryLocation:text; receiverId:text; assignmentId:text; wages:nat64; contractId:text; pickupLocation:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    updateDeliveryDriverProfile: (record {name:text; email:text; vehicle:variant {Car:text; Van:text; Bicycle:text; Motorcycle:text; Truck:text; Other:text}; phoneNumber:text}) -> (variant {Ok:record {driverId:text; owner:principal; name:text; email:text; vehicle:variant {Car:text; Van:text; Bicycle:text; Motorcycle:text; Truck:text; Other:text}; phoneNumber:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    updateDonorProfile: (record {name:text; businessType:variant {Grocery:text; Bakery:text; Other:text; Restaurant:text}; email:text; address:text; phoneNumber:text}) -> (variant {Ok:record {owner:principal; donorId:text; name:text; businessType:variant {Grocery:text; Bakery:text; Other:text; Restaurant:text}; email:text; address:text; phoneNumber:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    updateFoodContract: (text, variant {Accepted:text; Cancelled:text; Completed:text; Pending:text}) -> (variant {Ok:record {status:variant {Accepted:text; Cancelled:text; Completed:text; Pending:text}; donorId:text; receiverId:opt text; agreedQuantity:nat64; contractId:text; postId:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    updateFoodSurplusPost: (text, variant {Available:text; Claimed:text}) -> (variant {Ok:record {status:variant {Available:text; Claimed:text}; donorId:text; expiryDate:text; description:text; quantity:nat64; location:text; postId:text; foodType:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
    updateReceiverProfile: (record {name:text; email:text; needs:text; address:text; phoneNumber:text}) -> (variant {Ok:record {owner:principal; name:text; email:text; receiverId:text; needs:text; address:text; phoneNumber:text}; Err:variant {Error:text; PaymentFailed:text; InvalidPayload:text; NotFound:text; Success:text; PaymentCompleted:text}});
}
